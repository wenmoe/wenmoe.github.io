---
layout: post
title:  "Java8의 default methods"
date:   2019-02-21
author: yujin eom
categories: java
---

## 추상클래스(abstract class)


추상클래스는 미완성 메소드(추상메소드)를 포함하고 있는 클래스다. 
추상메소드(abstract method)는 선언부만 작성되어있고, 구현체가 없는 메소드다.
```
abstract 리턴타입 메소드명();
```

추상클래스는 인스턴스를 생성할 수 없고, 상속을 통해 자손클래스에서 완성할 수 있다.

```
abstract class 클래스명 {
    ...
}
```
다들 알겠지만, 간단하게 클래스 앞에 abstract 키워드를 넣어주면 끝이다! 

"이 클래스는 추상메소드가 있으니 상속을 통해 구현해주어야 한다" 는 것을 명시합니다.
추상클래스는 추상메소드를 포함하고 있다는 것을 제외하면, 일반 클래스와 전혀 다를 것이 없다. 따라서 생성자가 존재하며, 멤버변수와 메소드를 가질 수 있다.

추상클래스내에 꼭 추상메소드만 있어야 하는 것은 아니다. 상속받을 자손 클래스에서 공통적으로 사용될 메소드는 선언부와 구현체가 있는 보통의 메소드를 정의하면 된다.
<br><br><br>



## 인터페이스(interface)
인터페이스는 추상클래스처럼 추상메소드를 갖지만 추상클래스보다 추상화의 정도가 더 높아서 일반 메소드나 멤버변수는 갖고 있을 수 없다. 오직 **추상메소드**, **상수**만이 허용된다.


```
interface 인터페이스명 {
    타입 상수명 = 값;
    메소드명(매개변수...);
}
```

인터페이스는 인터페이스로부터 상속이 가능하며, 클래스와 달리 **다중상속**이 가능하다.
인터페이스를 구현할 때에는 구현할 클래스명 뒤에 implements 키워드를 붙여 해당 인터페이스에 정의된 추상메소드를 구현하면 된다.


여기까지는 다들 일반적으로 알고있는 추상클래스, 인터페이스의 이야기이다.
<br><br><br>

## Default Methods
그렇다면 선언부와 상수만 갖고있는 interface에 새로운 기능이 추가된다면? 
해당 interface를 구현하는 모든 클래스에서 추가된 메소드에 해당하는 구현체를 추가해주어야 한다.
<br>
하지만, Java8에서 등장한 default method를 통해 이 문제를 해결할 수 있다. 


```
interface 인터페이스명 {
    메소드명(매개변수...);
    default 메소드명(매개변수...);
}
```
앞에 default 키워드를 붙여 선언할 수 있다. default 메소드는 추상메소드가 아니기 때문에 구현한 기존의 클래스를 변경하지 않아도 된다. 


<br><br><br>

* * *


추상클래스는 여러 클래스들의 공통점을 모아 추상화시킨 것이다. 다중상속이 불가능하고 상속 받아 기능을 확장시키는 것이 목적이다!
**상속**과 **확장(extends)** 이 추상클래스의 목적이다.

인터페이스는 구현 객체가 같은 동작을 한다는 것을 보장하기 위함이 목적이다. 또한 인터페이스는 다중 상속이 가능하다.
**구현(implements)** 을 하도록 하는 것이 인터페이스의 목적이다.

<br><br><br>
정리해보자면, 계층구조가 명확하고 상속이 필요한 경우에는 추상클래스를 통해 상속받아 확장을 할 수 있고, 

동작에 대한 약속(구현), 공유가 필요한 경우에는 인터페이스를 사용한다.
인터페이스를 통한 구현은 중복 코드가 많이 발생할 수 있으니 default method로 해결할 수 있다.


<br><br>
추상클래스, 인터페이스를 적용할 때 그 차이를 잘 생각해보고 Java8에서 인터페이스에 추가된 점들이 있으니 어떤 것을 적용할지 고민해보면 좋을 것 같다.



### 참고
* Java의 정석 3rd Edition
* https://docs.oracle.com/javase/tutorial/java/IandI/defaultmethods.html